/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HitAndBlowInterface extends ethers.utils.Interface {
  functions: {
    "MAX_ROUND()": FunctionFragment;
    "commitSolutionHash(uint256)": FunctionFragment;
    "currentRound()": FunctionFragment;
    "getSubmittedGuess(address)": FunctionFragment;
    "getSubmittedHB(address)": FunctionFragment;
    "getplayers()": FunctionFragment;
    "hasher()": FunctionFragment;
    "initialize()": FunctionFragment;
    "initializeOnlyOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "players(uint256)": FunctionFragment;
    "register()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reveal(uint256,uint8,uint8,uint8,uint8)": FunctionFragment;
    "solutionHashes(address)": FunctionFragment;
    "stage()": FunctionFragment;
    "submitGuess(uint8,uint8,uint8,uint8)": FunctionFragment;
    "submitHbProof(uint256[2],uint256[2][2],uint256[2],uint256[8])": FunctionFragment;
    "submittedGuess(uint256,address)": FunctionFragment;
    "submittedHB(uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifier()": FunctionFragment;
    "winner()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MAX_ROUND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commitSolutionHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmittedGuess",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmittedHB",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getplayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hasher", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeOnlyOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "register", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reveal",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "solutionHashes",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "stage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitGuess",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitHbProof",
    values: [
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "submittedGuess",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "submittedHB",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_ROUND", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitSolutionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmittedGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubmittedHB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getplayers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeOnlyOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reveal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "solutionHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitHbProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submittedGuess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submittedHB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;

  events: {
    "CommitSolutionHash(address,uint256)": EventFragment;
    "GameFinish(address)": EventFragment;
    "Initialize()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Register(address)": EventFragment;
    "Reveal(address,uint8,uint8,uint8,uint8)": EventFragment;
    "RoundChange(uint8)": EventFragment;
    "StageChange(uint8)": EventFragment;
    "SubmitGuess(address,uint8,uint8,uint8,uint8,uint8)": EventFragment;
    "SubmitHB(address,uint8,uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CommitSolutionHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameFinish"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Register"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Reveal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StageChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitGuess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitHB"): EventFragment;
}

export type CommitSolutionHashEvent = TypedEvent<
  [string, BigNumber] & { player: string; solutionHash: BigNumber }
>;

export type GameFinishEvent = TypedEvent<[string] & { winner: string }>;

export type InitializeEvent = TypedEvent<[] & {}>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RegisterEvent = TypedEvent<[string] & { player: string }>;

export type RevealEvent = TypedEvent<
  [string, number, number, number, number] & {
    player: string;
    a: number;
    b: number;
    c: number;
    d: number;
  }
>;

export type RoundChangeEvent = TypedEvent<[number] & { round: number }>;

export type StageChangeEvent = TypedEvent<[number] & { stage: number }>;

export type SubmitGuessEvent = TypedEvent<
  [string, number, number, number, number, number] & {
    player: string;
    currentRound: number;
    a: number;
    b: number;
    c: number;
    d: number;
  }
>;

export type SubmitHBEvent = TypedEvent<
  [string, number, number, number] & {
    player: string;
    currentRound: number;
    hit: number;
    blow: number;
  }
>;

export class HitAndBlow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HitAndBlowInterface;

  functions: {
    MAX_ROUND(overrides?: CallOverrides): Promise<[number]>;

    commitSolutionHash(
      solutionHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentRound(overrides?: CallOverrides): Promise<[number]>;

    getSubmittedGuess(
      player: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, number, number, number, boolean] & {
          one: number;
          two: number;
          three: number;
          four: number;
          submitted: boolean;
        })[]
      ]
    >;

    getSubmittedHB(
      player: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, number, boolean] & {
          hit: number;
          blow: number;
          submitted: boolean;
        })[]
      ]
    >;

    getplayers(overrides?: CallOverrides): Promise<[[string, string]]>;

    hasher(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initializeOnlyOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    players(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    register(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reveal(
      salt: BigNumberish,
      a: BigNumberish,
      b: BigNumberish,
      c: BigNumberish,
      d: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    solutionHashes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stage(overrides?: CallOverrides): Promise<[number]>;

    submitGuess(
      guess1: BigNumberish,
      guess2: BigNumberish,
      guess3: BigNumberish,
      guess4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitHbProof(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submittedGuess(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, boolean] & {
        one: number;
        two: number;
        three: number;
        four: number;
        submitted: boolean;
      }
    >;

    submittedHB(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, boolean] & {
        hit: number;
        blow: number;
        submitted: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    winner(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_ROUND(overrides?: CallOverrides): Promise<number>;

  commitSolutionHash(
    solutionHash: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentRound(overrides?: CallOverrides): Promise<number>;

  getSubmittedGuess(
    player: string,
    overrides?: CallOverrides
  ): Promise<
    ([number, number, number, number, boolean] & {
      one: number;
      two: number;
      three: number;
      four: number;
      submitted: boolean;
    })[]
  >;

  getSubmittedHB(
    player: string,
    overrides?: CallOverrides
  ): Promise<
    ([number, number, boolean] & {
      hit: number;
      blow: number;
      submitted: boolean;
    })[]
  >;

  getplayers(overrides?: CallOverrides): Promise<[string, string]>;

  hasher(overrides?: CallOverrides): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initializeOnlyOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  players(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  register(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reveal(
    salt: BigNumberish,
    a: BigNumberish,
    b: BigNumberish,
    c: BigNumberish,
    d: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  solutionHashes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  stage(overrides?: CallOverrides): Promise<number>;

  submitGuess(
    guess1: BigNumberish,
    guess2: BigNumberish,
    guess3: BigNumberish,
    guess4: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitHbProof(
    a: [BigNumberish, BigNumberish],
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    c: [BigNumberish, BigNumberish],
    input: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submittedGuess(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, boolean] & {
      one: number;
      two: number;
      three: number;
      four: number;
      submitted: boolean;
    }
  >;

  submittedHB(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, boolean] & {
      hit: number;
      blow: number;
      submitted: boolean;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifier(overrides?: CallOverrides): Promise<string>;

  winner(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_ROUND(overrides?: CallOverrides): Promise<number>;

    commitSolutionHash(
      solutionHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    currentRound(overrides?: CallOverrides): Promise<number>;

    getSubmittedGuess(
      player: string,
      overrides?: CallOverrides
    ): Promise<
      ([number, number, number, number, boolean] & {
        one: number;
        two: number;
        three: number;
        four: number;
        submitted: boolean;
      })[]
    >;

    getSubmittedHB(
      player: string,
      overrides?: CallOverrides
    ): Promise<
      ([number, number, boolean] & {
        hit: number;
        blow: number;
        submitted: boolean;
      })[]
    >;

    getplayers(overrides?: CallOverrides): Promise<[string, string]>;

    hasher(overrides?: CallOverrides): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    initializeOnlyOwner(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    players(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    register(overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reveal(
      salt: BigNumberish,
      a: BigNumberish,
      b: BigNumberish,
      c: BigNumberish,
      d: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    solutionHashes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stage(overrides?: CallOverrides): Promise<number>;

    submitGuess(
      guess1: BigNumberish,
      guess2: BigNumberish,
      guess3: BigNumberish,
      guess4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    submitHbProof(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    submittedGuess(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, boolean] & {
        one: number;
        two: number;
        three: number;
        four: number;
        submitted: boolean;
      }
    >;

    submittedHB(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, boolean] & {
        hit: number;
        blow: number;
        submitted: boolean;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifier(overrides?: CallOverrides): Promise<string>;

    winner(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "CommitSolutionHash(address,uint256)"(
      player?: string | null,
      solutionHash?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; solutionHash: BigNumber }
    >;

    CommitSolutionHash(
      player?: string | null,
      solutionHash?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { player: string; solutionHash: BigNumber }
    >;

    "GameFinish(address)"(
      winner?: string | null
    ): TypedEventFilter<[string], { winner: string }>;

    GameFinish(
      winner?: string | null
    ): TypedEventFilter<[string], { winner: string }>;

    "Initialize()"(): TypedEventFilter<[], {}>;

    Initialize(): TypedEventFilter<[], {}>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Register(address)"(
      player?: string | null
    ): TypedEventFilter<[string], { player: string }>;

    Register(
      player?: string | null
    ): TypedEventFilter<[string], { player: string }>;

    "Reveal(address,uint8,uint8,uint8,uint8)"(
      player?: string | null,
      a?: null,
      b?: null,
      c?: null,
      d?: null
    ): TypedEventFilter<
      [string, number, number, number, number],
      { player: string; a: number; b: number; c: number; d: number }
    >;

    Reveal(
      player?: string | null,
      a?: null,
      b?: null,
      c?: null,
      d?: null
    ): TypedEventFilter<
      [string, number, number, number, number],
      { player: string; a: number; b: number; c: number; d: number }
    >;

    "RoundChange(uint8)"(
      round?: null
    ): TypedEventFilter<[number], { round: number }>;

    RoundChange(round?: null): TypedEventFilter<[number], { round: number }>;

    "StageChange(uint8)"(
      stage?: null
    ): TypedEventFilter<[number], { stage: number }>;

    StageChange(stage?: null): TypedEventFilter<[number], { stage: number }>;

    "SubmitGuess(address,uint8,uint8,uint8,uint8,uint8)"(
      player?: string | null,
      currentRound?: null,
      a?: null,
      b?: null,
      c?: null,
      d?: null
    ): TypedEventFilter<
      [string, number, number, number, number, number],
      {
        player: string;
        currentRound: number;
        a: number;
        b: number;
        c: number;
        d: number;
      }
    >;

    SubmitGuess(
      player?: string | null,
      currentRound?: null,
      a?: null,
      b?: null,
      c?: null,
      d?: null
    ): TypedEventFilter<
      [string, number, number, number, number, number],
      {
        player: string;
        currentRound: number;
        a: number;
        b: number;
        c: number;
        d: number;
      }
    >;

    "SubmitHB(address,uint8,uint8,uint8)"(
      player?: string | null,
      currentRound?: null,
      hit?: null,
      blow?: null
    ): TypedEventFilter<
      [string, number, number, number],
      { player: string; currentRound: number; hit: number; blow: number }
    >;

    SubmitHB(
      player?: string | null,
      currentRound?: null,
      hit?: null,
      blow?: null
    ): TypedEventFilter<
      [string, number, number, number],
      { player: string; currentRound: number; hit: number; blow: number }
    >;
  };

  estimateGas: {
    MAX_ROUND(overrides?: CallOverrides): Promise<BigNumber>;

    commitSolutionHash(
      solutionHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentRound(overrides?: CallOverrides): Promise<BigNumber>;

    getSubmittedGuess(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubmittedHB(
      player: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getplayers(overrides?: CallOverrides): Promise<BigNumber>;

    hasher(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initializeOnlyOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    players(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    register(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reveal(
      salt: BigNumberish,
      a: BigNumberish,
      b: BigNumberish,
      c: BigNumberish,
      d: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    solutionHashes(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    stage(overrides?: CallOverrides): Promise<BigNumber>;

    submitGuess(
      guess1: BigNumberish,
      guess2: BigNumberish,
      guess3: BigNumberish,
      guess4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitHbProof(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submittedGuess(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    submittedHB(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    winner(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_ROUND(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitSolutionHash(
      solutionHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubmittedGuess(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubmittedHB(
      player: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getplayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initializeOnlyOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    players(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reveal(
      salt: BigNumberish,
      a: BigNumberish,
      b: BigNumberish,
      c: BigNumberish,
      d: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    solutionHashes(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitGuess(
      guess1: BigNumberish,
      guess2: BigNumberish,
      guess3: BigNumberish,
      guess4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitHbProof(
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      input: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submittedGuess(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submittedHB(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winner(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
